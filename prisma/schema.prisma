generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_1")
}

model admin {
  id       Int    @id @default(autoincrement())
  name     String 
  email    String @unique(map: "Admin_email_key")
  password String
  role    String
}

model kitchendashboard {
  id          Int      @id @default(autoincrement())
  tableNumber Int
  items       String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  orderId     Int?     // Added 6-digit order ID field
}
model Staff {
  id         Int               @id @default(autoincrement())
  name       String
  role       String
  phone      String
  email      String?           @unique
  photo      String?
  joinedAt   DateTime          @default(now())
  status     String            // "Active" | "Inactive"
  attendance StaffAttendance[]
}

model StaffAttendance {
  id       Int       @id @default(autoincrement())
  staffId  Int
  date     DateTime
  checkIn  DateTime?
  checkOut DateTime?
  status   String
  staff    Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, date])
}

model Menu {
  id          Int      @id @default(autoincrement())
  itemName    String
  price       Float
  description String
  imageUrl    String
  category    String
  isVeg       Boolean  @default(true)
  createdAt   DateTime @default(now())
  recipe      Recipe?
}
model order2 {
  id          Int      @id @default(autoincrement())
  tableNumber Int
  items       String
  createdAt   DateTime @default(now())
  status      String   @default("pending")
  price       Float
  orderId     Int?     // Updated to store 6-digit order ID
}

model orderanalytics {
  id             Int      @id @default(autoincrement())
  orderId        Int      @unique(map: "OrderAnalytics_orderId_key")
  totalAmount    Float
  totalItemsSold Int
  topItemName    String
  topItemCount   Int
  createdAt      DateTime @default(now())
  numericOrderId Int?     // Added to store the 6-digit order ID
}

model InventoryItem {
  id           Int              @id @default(autoincrement())
  name         String
  category     String
  unit         String           // e.g., kg, liter, piece
  sku          String           @unique
  quantity     Float            // Current stock
  reorderLevel Float            // Alert threshold
  maxCapacity  Float
  variants     InventoryVariant[]
  supplierId   Int?
  supplier     Supplier?        @relation(fields: [supplierId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  stockInOut   StockInOut[]
  wastages     Wastage[]
  recipeItems  RecipeIngredient[]
  purchaseOrderItems PurchaseOrderItem[]
}

model InventoryVariant {
  id             Int           @id @default(autoincrement())
  inventoryItem  InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId Int
  size           String        // e.g., 1L, 5kg
  quantity       Float         // Stock for this variant
}

model Supplier {
  id          Int              @id @default(autoincrement())
  name        String
  contact     String
  email       String?
  phone       String?
  items       InventoryItem[]
  purchaseOrders PurchaseOrder[]
  stockInOut  StockInOut[]     // Added to complete the relation with StockInOut
}

model StockInOut {
  id             Int           @id @default(autoincrement())
  inventoryItem  InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId Int
  type           String        // "in" or "out"
  quantity       Float
  price          Float?        // For stock in (purchase)
  date           DateTime      @default(now())
  supplierId     Int?
  supplier       Supplier?     @relation(fields: [supplierId], references: [id])
  note           String?
  orderId        Int?          // Link to order2 if stock out due to order
}

model Recipe {
  id          Int              @id @default(autoincrement())
  menuItemId  Int              @unique
  menuItem    Menu             @relation(fields: [menuItemId], references: [id])
  ingredients RecipeIngredient[]
}

model RecipeIngredient {
  id             Int           @id @default(autoincrement())
  recipe         Recipe        @relation(fields: [recipeId], references: [id])
  recipeId       Int
  inventoryItem  InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId Int
  quantity       Float         // Quantity required per dish
  unit           String
}

model Wastage {
  id             Int           @id @default(autoincrement())
  inventoryItem  InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId Int
  quantity       Float
  reason         String
  date           DateTime      @default(now())
  note           String?
}

model PurchaseOrder {
  id             Int           @id @default(autoincrement())
  supplier       Supplier      @relation(fields: [supplierId], references: [id])
  supplierId     Int
  status         String        // "pending", "delivered", "partial"
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  items          PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id               Int           @id @default(autoincrement())
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  Int
  inventoryItem    InventoryItem @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId  Int
  quantity         Float
  unit             String
  price            Float
  delivered        Boolean       @default(false)
}

model CustomerContact {
  id        Int     @id @default(autoincrement())
  contactNo String? @unique
  email     String? @unique
  createdAt DateTime @default(now())
}

model RagDocument {
  id         Int      @id @default(autoincrement())
  content    String   // The text/content of the document
  embedding  String   // Serialized embedding vector (e.g., JSON string)
  source     String?  // Optional: source info (URL, filename, etc.)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  queries    RagQuery[]
}

model RagQuery {
  id           Int      @id @default(autoincrement())
  query        String   // The user's query
  retrievedIds String   // Document IDs retrieved (e.g., comma-separated or JSON array)
  response     String   // The generated response from the RAG model
  createdAt    DateTime @default(now())
  ragDocument  RagDocument? @relation(fields: [ragDocumentId], references: [id])
  ragDocumentId Int?
}


